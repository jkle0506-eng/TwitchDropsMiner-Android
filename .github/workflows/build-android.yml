name: Build TwitchDropsMiner APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev
        sudo apt install -y python3-dev python3-pip python3-venv
        sudo apt install -y git zip unzip wget curl
        sudo apt install -y libffi-dev libssl-dev
        sudo apt install -y cmake ninja-build
        sudo apt install -y libtool automake autoconf
        sudo apt install -y pkg-config
        sudo apt install -y openjdk-11-jdk
        sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java

    - name: Set up Android SDK
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        mkdir -p $ANDROID_HOME
        cd $ANDROID_HOME
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O sdk-tools.zip
        unzip sdk-tools.zip
        yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_HOME --install "platforms;android-30" "build-tools;30.0.3" "platform-tools"
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Set up Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        pip install python-for-android

    - name: Prepare build environment
      run: |
        mkdir -p $HOME/.buildozer/android/platform
        buildozer android debug --verbose

    - name: Build APK
      run: |
        buildozer -v android debug

    - name: List build output directories (debug)
      if: always()
      run: |
        echo "Listing possible build output dirs:"
        ls -la .buildozer || true
        ls -la .buildozer/android || true
        ls -la .buildozer/android/platform || true
        ls -la .buildozer/android/platform/build-* || true
        echo "Recursive listing of outputs dirs (if exist):"
        for d in .buildozer/android/platform/build-* ; do
          if [ -d "$d" ]; then
            echo "==== $d ===="
            ls -la "$d" || true
            ls -la "$d"/outputs || true
          fi
        done || true

    - name: List APK files (before copy)
      if: always()
      run: |
        echo "Listing all APK files found (before copy):"
        find . -type f -name "*.apk" -print || echo "No APK files found"

    - name: Find and copy APKs into bin/ (so upload-artifact can find them)
      if: always()
      run: |
        set -euo pipefail
        mkdir -p bin
        echo "Searching for APKs..."
        mapfile -t apks < <(find . -type f -name "*.apk" -print)
        if [ ${#apks[@]} -eq 0 ]; then
          echo "No APK files found to copy."
        else
          i=0
          for p in "${apks[@]}"; do
            i=$((i+1))
            fn=$(basename "$p")
            cp "$p" "bin/${i}_${fn}"
            echo "Copied: $p -> bin/${i}_${fn}"
          done
          echo "Final bin/ contents:"
          ls -la bin || true
        fi

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          buildozer_output.log
          .buildozer/**
        if-no-files-found: warn

    - name: Upload APK (on success)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: apk
        path: |
          bin/*.apk
          ./.buildozer/android/platform/build-*/outputs/**/*.apk
          ./.buildozer/android/platform/build-*/outputs/apk/**/*.apk
        if-no-files-found: warn
