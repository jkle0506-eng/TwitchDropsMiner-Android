name: Build Android APK

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install APT packages (dev toolchain, EGL/OpenGL, autotools, cmake...)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git build-essential unzip curl python3-dev python3-venv python3-pip python3-setuptools python3-distutils-extra \
            openjdk-17-jdk-headless libffi-dev libssl-dev zlib1g-dev libbz2-dev liblzma-dev \
            libsqlite3-dev libncurses-dev libreadline-dev libx11-dev \
            libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev \
            libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev \
            libtool automake autoconf pkg-config cmake ninja-build

      - name: Install Android commandline-tools and SDK packages
        run: |
          set -euo pipefail
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd /tmp
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          sudo rm -rf $ANDROID_SDK_ROOT/cmdline-tools/latest || true
          sudo mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          sudo mv cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          # akceptovať licencie (|| true pre prípad neinteraktívneho prostredia)
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses || true
          # uprav verzie platform / build-tools / ndk podľa buildozer.spec ak treba
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-31" "build-tools;31.0.0" "ndk;21.4.7075529" || true

      - name: Create Python venv and install buildozer + p4a + cython
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install cython==0.29.33 buildozer==1.5.0 python-for-android==2024.1.21

      - name: Run buildozer (build) and capture logs
        run: |
          set -euo pipefail
          . .venv/bin/activate
          # buildozer môže skončiť ne-nulovým exit kódom; chceme vždy získať logy -> || true
          buildozer -v android debug 2>&1 | tee buildozer_output.log || true

      - name: Show tail of buildozer output (quick peek)
        if: always()
        run: |
          echo "=== buildozer_output.log (last 300 lines) ==="
          tail -n 300 buildozer_output.log || true

      - name: Collect and show .buildozer logs (first 200 lines each)
        if: always()
        run: |
          echo "=== .buildozer logs (first 200 lines each) ==="
          find .buildozer -type f -name "*.log" -exec echo "File: {}" \; -exec sed -n '1,200p' {} \; || true

      - name: List APK files (before copy)
        run: |
          echo "Listing all APK files found (before copy):"
          find . -type f -name "*.apk" -print || echo "No APK files found"

      - name: Find and copy APKs into bin/ (so upload-artifact can find them)
        run: |
          set -euo pipefail
          mkdir -p bin
          echo "Searching for APKs..."
          # create an array of found apks
          mapfile -t apks < <(find . -type f -name "*.apk" -print)
          if [ ${#apks[@]} -eq 0 ]; then
            echo "No APK files found to copy."
            exit 0
          fi
          i=0
          for p in "${apks[@]}"; do
            i=$((i+1))
            fn=$(basename "$p")
            # copy and prefix with index to avoid collisions
            cp "$p" "bin/${i}_${fn}"
            echo "Copied: $p -> bin/${i}_${fn}"
          done
          echo "Final bin/ contents:"
          ls -la bin || true

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            buildozer_output.log
            .buildozer/**

      - name: Upload APK (on success)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: |
            bin/*.apk
            ./.buildozer/android/platform/build-*/outputs/**/*.apk
            ./.buildozer/android/platform/build-*/outputs/apk/**/*.apk
