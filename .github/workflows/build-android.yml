name: Build Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Git explicitly
      shell: bash
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y git
        git --version

    - name: Install system dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get install -y --no-install-recommends \
          python3-pip python3-setuptools python3-wheel \
          build-essential cmake ninja-build pkg-config m4 \
          libjpeg-dev libpng-dev libfreetype6-dev libffi-dev zlib1g-dev \
          libltdl-dev autoconf automake libtool gettext \
          ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          nasm yasm rsync patchelf ccache \
          libegl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev mesa-common-dev \
          openjdk-17-jdk unzip zip curl ca-certificates

    - name: Install Buildozer (pin Cython)
      run: |
        pip3 install --upgrade pip
        pip3 install --user "cython==0.29.36" buildozer
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        python -m buildozer --version || true

    - name: Prepare local Android SDK for Buildozer
      shell: bash
      run: |
        set -e
        export LOCAL_SDK="${HOME}/.buildozer/android/platform/android-sdk"
        mkdir -p "${LOCAL_SDK}/cmdline-tools/latest"
        if [ ! -x "${LOCAL_SDK}/cmdline-tools/latest/bin/sdkmanager" ]; then
          cd /tmp
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
          unzip -q clt.zip
          mv cmdline-tools/* "${LOCAL_SDK}/cmdline-tools/latest"/
        fi
        export ANDROID_SDK_ROOT="${LOCAL_SDK}"
        export ANDROID_HOME="${LOCAL_SDK}"
        echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH
        yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
        "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" \
          "platform-tools" \
          "build-tools;36.1.0" \
          "platforms;android-33"

    - name: Cache Buildozer
      uses: actions/cache@v4
      with:
        path: |
          .buildozer
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec', 'requirements.txt') }}

    - name: Build APK
      shell: bash
      env:
        ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
        PATH: /usr/bin:/home/runner/.local/bin:/home/runner/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:/home/runner/.buildozer/android/platform/android-sdk/platform-tools:${PATH}
      run: |
        set -e
        echo "git: $(git --version)"
        echo "cmake: $(cmake --version | head -n1)"
        echo "pkg-config: $(pkg-config --version)"
        which autoconf && autoconf --version | head -n1
        which automake && automake --version | head -n1
        which libtoolize && libtoolize --version | head -n1 || true

        # Workaround pre starú cestu sdkmanager
        mkdir -p "${ANDROID_SDK_ROOT}/tools/bin"
        if [ ! -e "${ANDROID_SDK_ROOT}/tools/bin/sdkmanager" ]; then
          ln -s "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" "${ANDROID_SDK_ROOT}/tools/bin/sdkmanager"
        fi

        # Build (requirements sa berú z buildozer.spec)
        set +e
        python -m buildozer -v android debug 2>&1 | tee p4a_create.log
        status=${PIPESTATUS[0]}
        set -e
        
        echo "==== tail p4a_create.log ===="
        tail -n 200 p4a_create.log || true
        echo "==== try tail kivy build log ===="
        find .buildozer -name "kivy*.log" -type f -print -exec tail -n 200 {} \; || true
        echo "=============================="
        exit ${status}

    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: TwitchDropsMiner-debug
        path: bin/*.apk
